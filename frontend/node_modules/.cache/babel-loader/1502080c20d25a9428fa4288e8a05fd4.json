{"ast":null,"code":"import _regeneratorRuntime from\"/home/facu/Desktop/alkemy/superheros/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/facu/Desktop/alkemy/superheros/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/facu/Desktop/alkemy/superheros/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import{Formik,Form}from'formik';import TextField from'./TextField';import*as Yup from'yup';import{loginUser,checkTokenValidity}from'../../services/login';import AuthContext from'../../store/auth-context';import{useHistory}from'react-router-dom';import Alert from'./Alert';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LoginForm=function LoginForm(){var authCtx=useContext(AuthContext);var _useState=useState(true),_useState2=_slicedToArray(_useState,2),tokenValidity=_useState2[0],setTokenValidity=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var history=useHistory();var validate=Yup.object({email:Yup.string().email('Invalid email').required('Email is required'),password:Yup.string().required('Password is required')});return/*#__PURE__*/_jsx(Formik,{initialValues:{email:'',password:''},validationSchema:validate,onSubmit:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(credentials){var token,isTokenValid;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsLoading(true);_context.next=3;return loginUser(credentials);case 3:token=_context.sent;isTokenValid=checkTokenValidity(token);setIsLoading(false);if(isTokenValid){_context.next=9;break;}setTokenValidity(false);return _context.abrupt(\"return\");case 9:authCtx.login(token);history.replace('/home');case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-primary\",children:\"Sign In\"}),/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(TextField,{label:\"Email\",name:\"email\",type:\"email\"}),/*#__PURE__*/_jsx(TextField,{label:\"Password\",name:\"password\",type:\"password\"}),!isLoading&&/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-primary mt-3\",children:\"Login\"}),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner-border text-primary\",role:\"status\"})}),!tokenValidity&&!isLoading&&/*#__PURE__*/_jsx(Alert,{})]})]})});};export default LoginForm;","map":{"version":3,"sources":["/home/facu/Desktop/alkemy/superheros/frontend/src/components/login/LoginForm.jsx"],"names":["React","useContext","useState","Formik","Form","TextField","Yup","loginUser","checkTokenValidity","AuthContext","useHistory","Alert","LoginForm","authCtx","tokenValidity","setTokenValidity","isLoading","setIsLoading","history","validate","object","email","string","required","password","credentials","token","isTokenValid","login","replace"],"mappings":"yeAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,KAA4C,OAA5C,CACA,OAASC,MAAT,CAAiBC,IAAjB,KAA6B,QAA7B,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAASC,SAAT,CAAoBC,kBAApB,KAA8C,sBAA9C,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAMC,CAAAA,OAAO,CAAGZ,UAAU,CAACQ,WAAD,CAA1B,CADsB,cAEoBP,QAAQ,CAAC,IAAD,CAF5B,wCAEfY,aAFe,eAEAC,gBAFA,8BAGYb,QAAQ,CAAC,KAAD,CAHpB,yCAGfc,SAHe,eAGJC,YAHI,eAKtB,GAAMC,CAAAA,OAAO,CAAGR,UAAU,EAA1B,CAEA,GAAMS,CAAAA,QAAQ,CAAGb,GAAG,CAACc,MAAJ,CAAW,CAC1BC,KAAK,CAAEf,GAAG,CAACgB,MAAJ,GAAaD,KAAb,CAAmB,eAAnB,EAAoCE,QAApC,CAA6C,mBAA7C,CADmB,CAE1BC,QAAQ,CAAElB,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CAFgB,CAAX,CAAjB,CAIA,mBACE,KAAC,MAAD,EACE,aAAa,CAAE,CACbF,KAAK,CAAE,EADM,CAEbG,QAAQ,CAAE,EAFG,CADjB,CAKE,gBAAgB,CAAEL,QALpB,CAME,QAAQ,0FAAE,iBAAOM,WAAP,yIACRR,YAAY,CAAC,IAAD,CAAZ,CADQ,sBAEYV,CAAAA,SAAS,CAACkB,WAAD,CAFrB,QAEFC,KAFE,eAGFC,YAHE,CAGanB,kBAAkB,CAACkB,KAAD,CAH/B,CAIRT,YAAY,CAAC,KAAD,CAAZ,CAJQ,GAKHU,YALG,yBAMNZ,gBAAgB,CAAC,KAAD,CAAhB,CANM,wCASRF,OAAO,CAACe,KAAR,CAAcF,KAAd,EACAR,OAAO,CAACW,OAAR,CAAgB,OAAhB,EAVQ,uDAAF,8DANV,uBAoBI,oCACE,WAAI,SAAS,CAAC,cAAd,qBADF,cAEE,MAAC,IAAD,yBACE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,CAAyB,IAAI,CAAC,OAA9B,CAAsC,IAAI,CAAC,OAA3C,EADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAC,UAAjB,CAA4B,IAAI,CAAC,UAAjC,CAA4C,IAAI,CAAC,UAAjD,EAFF,CAGG,CAACb,SAAD,eACC,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,sBAAhC,mBAJJ,CASGA,SAAS,eACR,YAAK,SAAS,CAAC,aAAf,uBACE,YACE,SAAS,CAAC,6BADZ,CAEE,IAAI,CAAC,QAFP,EADF,EAVJ,CAkBG,CAACF,aAAD,EAAkB,CAACE,SAAnB,eAAgC,KAAC,KAAD,IAlBnC,GAFF,GApBJ,EADF,CA+CD,CA1DD,CA4DA,cAAeJ,CAAAA,SAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport TextField from './TextField';\nimport * as Yup from 'yup';\nimport { loginUser, checkTokenValidity } from '../../services/login';\nimport AuthContext from '../../store/auth-context';\nimport { useHistory } from 'react-router-dom';\nimport Alert from './Alert';\n\nconst LoginForm = () => {\n  const authCtx = useContext(AuthContext);\n  const [tokenValidity, setTokenValidity] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const history = useHistory();\n\n  const validate = Yup.object({\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={validate}\n      onSubmit={async (credentials) => {\n        setIsLoading(true);\n        const token = await loginUser(credentials);\n        const isTokenValid = checkTokenValidity(token);\n        setIsLoading(false);\n        if (!isTokenValid) {\n          setTokenValidity(false);\n          return;\n        }\n        authCtx.login(token);\n        history.replace('/home');\n      }}\n    >\n      {\n        <div>\n          <h1 className='text-primary'>Sign In</h1>\n          <Form>\n            <TextField label='Email' name='email' type='email' />\n            <TextField label='Password' name='password' type='password' />\n            {!isLoading && (\n              <button type='submit' className='btn btn-primary mt-3'>\n                Login\n              </button>\n            )}\n\n            {isLoading && (\n              <div className='text-center'>\n                <div\n                  className='spinner-border text-primary'\n                  role='status'\n                ></div>\n              </div>\n            )}\n\n            {!tokenValidity && !isLoading && <Alert />}\n          </Form>\n        </div>\n      }\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}