{"ast":null,"code":"var _jsxFileName = \"/home/facu/Desktop/alkemy/superheros/src/components/login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport TextField from './TextField';\nimport * as Yup from 'yup';\nimport { loginUser, checkTokenValidity } from '../../services/login';\nimport AuthContext from '../../store/auth-context';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = () => {\n  _s();\n\n  const authCtx = useContext(AuthContext);\n  const [tokenValidity, setTokenValidity] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n  const validate = Yup.object({\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: validate,\n    onSubmit: async credentials => {\n      setIsLoading(true);\n      const token = await loginUser(credentials);\n      const isTokenValid = checkTokenValidity(token);\n      setIsLoading(false);\n\n      if (!isTokenValid) {\n        setTokenValidity(false);\n        return;\n      }\n\n      authCtx.login(token);\n      history.replace('/home');\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-primary\",\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Password\",\n          name: \"password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border text-primary\",\n            role: \"status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this), !tokenValidity && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"alert alert-danger mt-1\",\n          role: \"alert\",\n          children: \"GAN GANG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"thpTF6qq5ymV5u0mwHCe0p8e3q8=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/facu/Desktop/alkemy/superheros/src/components/login/LoginForm.js"],"names":["React","useContext","useState","Formik","Form","TextField","Yup","loginUser","checkTokenValidity","AuthContext","useHistory","LoginForm","authCtx","tokenValidity","setTokenValidity","isLoading","setIsLoading","history","validate","object","email","string","required","password","credentials","token","isTokenValid","login","replace"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport TextField from './TextField';\nimport * as Yup from 'yup';\nimport { loginUser, checkTokenValidity } from '../../services/login';\nimport AuthContext from '../../store/auth-context';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginForm = () => {\n  const authCtx = useContext(AuthContext);\n  const [tokenValidity, setTokenValidity] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const history = useHistory();\n\n  const validate = Yup.object({\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={validate}\n      onSubmit={async (credentials) => {\n        setIsLoading(true);\n        const token = await loginUser(credentials);\n        const isTokenValid = checkTokenValidity(token);\n        setIsLoading(false);\n        if (!isTokenValid) {\n          setTokenValidity(false);\n          return;\n        }\n        authCtx.login(token);\n        history.replace('/home');\n      }}\n    >\n      {\n        <div>\n          <h1 className='text-primary'>Sign In</h1>\n          <Form>\n            <TextField label='Email' name='email' type='email' />\n            <TextField label='Password' name='password' type='password' />\n            {!isLoading && (\n              <button type='submit' className='btn btn-primary mt-3'>\n                Login\n              </button>\n            )}\n\n            {isLoading && (\n              <div class='text-center'>\n                <div\n                  className='spinner-border text-primary'\n                  role='status'\n                ></div>\n              </div>\n            )}\n\n            {!tokenValidity && !isLoading && (\n              <div class='alert alert-danger mt-1' role='alert'>\n                GAN GANG\n              </div>\n            )}\n          </Form>\n        </div>\n      }\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}