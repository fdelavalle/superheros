{"ast":null,"code":"import _regeneratorRuntime from\"/home/facu/Desktop/alkemy/superheros/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/facu/Desktop/alkemy/superheros/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';var baseUrl='http://challenge-react.alkemy.org/';export var loginUser=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var email,password,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:email=_ref.email,password=_ref.password;_context.prev=1;_context.next=4;return axios({url:baseUrl,method:'POST',data:{email:email,password:password}});case 4:response=_context.sent;return _context.abrupt(\"return\",response.data.token);case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function loginUser(_x){return _ref2.apply(this,arguments);};}();export var checkTokenValidity=function checkTokenValidity(token){if(token instanceof Error){return false;}return true;};","map":{"version":3,"sources":["/home/facu/Desktop/alkemy/superheros/frontend/src/services/login.js"],"names":["axios","baseUrl","loginUser","email","password","url","method","data","response","token","checkTokenValidity","Error"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,OAAO,CAAG,oCAAhB,CAEA,MAAO,IAAMC,CAAAA,SAAS,2FAAG,mKAASC,KAAT,MAASA,KAAT,CAAgBC,QAAhB,MAAgBA,QAAhB,uCAEEJ,CAAAA,KAAK,CAAC,CAC3BK,GAAG,CAAEJ,OADsB,CAE3BK,MAAM,CAAE,MAFmB,CAG3BC,IAAI,CAAE,CACJJ,KAAK,CAAEA,KADH,CAEJC,QAAQ,CAAEA,QAFN,CAHqB,CAAD,CAFP,QAEfI,QAFe,+CAUdA,QAAQ,CAACD,IAAT,CAAcE,KAVA,2KAAH,kBAATP,CAAAA,SAAS,6CAAf,CAgBP,MAAO,IAAMQ,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACD,KAAD,CAAW,CAC3C,GAAIA,KAAK,WAAYE,CAAAA,KAArB,CAA4B,CAC1B,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CACD,CALM","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'http://challenge-react.alkemy.org/';\n\nexport const loginUser = async ({ email, password }) => {\n  try {\n    const response = await axios({\n      url: baseUrl,\n      method: 'POST',\n      data: {\n        email: email,\n        password: password,\n      },\n    });\n    return response.data.token;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const checkTokenValidity = (token) => {\n  if (token instanceof Error) {\n    return false;\n  }\n  return true;\n};\n"]},"metadata":{},"sourceType":"module"}